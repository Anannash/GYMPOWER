/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package gym_app;

/*En esta parte se importa lo que se va utlizar para
el funcinamiento de esta pantalla */
import com.mysql.cj.jdbc.CallableStatement;
import com.mysql.cj.jdbc.result.ResultSetMetaData;
import gym_app.ClienteCarmenDAO;
import gym_app.EntrenadorCarmen;
import gym_app.EntrenadorCarmenDAO;
import gym_app.clienteCarmen;
import gym_app.conectar;
import java.awt.BorderLayout;
import java.awt.Image;
import java.awt.Point;
import java.io.File;
import java.sql.ResultSet;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author caos1
 */
public class clases2 extends javax.swing.JFrame {
   
    /**
     * Creates new form Clases
     */
    
    private JPanelConFondo fondo;
    public File archivoSeleccionado;
    private Point mPoint;
    public clases2() {
        setUndecorated(true);
        initComponents();    
        
        this.setLocationRelativeTo(null);
    fondo = new JPanelConFondo("src/Image/perfilF.png");
        Fondo.setLayout(new BorderLayout());
        Fondo.add(fondo);
        // foto de salir
        SetImageButton("src/Image/X.png", Salir);
        SetImageButton("src/Image/regresar.png", Regresarbtn);
       
    }
    
    private void SetImageButton(String url, JButton boton) {
        ImageIcon image = new ImageIcon(url);
        Icon icon = new ImageIcon(image.getImage().getScaledInstance(boton.getWidth(), boton.getHeight(), Image.SCALE_SMOOTH));
        boton.setIcon(icon);

        boton.setBorderPainted(false);
        boton.setContentAreaFilled(false);
        boton.setFocusPainted(false);
        boton.setOpaque(false);
        this.repaint();
    }
  
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel4 = new javax.swing.JLabel();
        Tmem = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        TN = new javax.swing.JTextField();
        Tap = new javax.swing.JTextField();
        Tam = new javax.swing.JTextField();
        bntInsertar = new javax.swing.JButton();
        txtClienteN = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        txtInstructor = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        txtIdClases = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        btnGuardar = new javax.swing.JButton();
        txtIdClasesG = new javax.swing.JTextField();
        txtIdcliente = new javax.swing.JTextField();
        jScrollPane3 = new javax.swing.JScrollPane();
        visor = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        btnBuscar = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        Tabla = new javax.swing.JTable();
        txtIDEntrenador = new javax.swing.JTextField();
        txtIdClienteN = new javax.swing.JTextField();
        jLabel15 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        txtIDEmpleado = new javax.swing.JTextField();
        Fondo = new javax.swing.JPanel();
        Salir = new javax.swing.JButton();
        jLabel21 = new javax.swing.JLabel();
        Regresarbtn = new javax.swing.JButton();

        jLabel4.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jLabel4.setText("Membrecia");

        jLabel5.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jLabel5.setText("Nombre");

        jLabel6.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jLabel6.setText("Apellido P");

        jLabel7.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jLabel7.setText("Apellido M");

        bntInsertar.setText("Insertar");
        bntInsertar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bntInsertarActionPerformed(evt);
            }
        });

        jLabel10.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jLabel10.setText("N.Cliente");

        jLabel3.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jLabel3.setText("N.instuctor");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        txtIdClases.setBackground(new java.awt.Color(251, 250, 248));
        txtIdClases.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel8.setFont(new java.awt.Font("Eras Bold ITC", 1, 24)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(255, 145, 77));
        jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel8.setText("Datos de la clase grupal");
        txtIdClases.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 30, 530, -1));

        btnGuardar.setBackground(new java.awt.Color(255, 145, 77));
        btnGuardar.setFont(new java.awt.Font("Eras Bold ITC", 0, 18)); // NOI18N
        btnGuardar.setText("Guardar");
        btnGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuardarActionPerformed(evt);
            }
        });
        txtIdClases.add(btnGuardar, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 180, 120, 40));

        txtIdClasesG.setBackground(new java.awt.Color(251, 250, 248));
        txtIdClases.add(txtIdClasesG, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 190, 180, -1));

        txtIdcliente.setBackground(new java.awt.Color(251, 250, 248));
        txtIdClases.add(txtIdcliente, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 80, 120, -1));

        jScrollPane3.setBackground(new java.awt.Color(255, 102, 102));

        visor.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        visor.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Id Clase Grupal", "Id Instructor", "Nombre de la clase", "Dia", "Horario"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        visor.setToolTipText("");
        visor.setSelectionBackground(new java.awt.Color(255, 145, 77));
        jScrollPane3.setViewportView(visor);
        if (visor.getColumnModel().getColumnCount() > 0) {
            visor.getColumnModel().getColumn(0).setResizable(false);
            visor.getColumnModel().getColumn(0).setPreferredWidth(15);
            visor.getColumnModel().getColumn(1).setResizable(false);
            visor.getColumnModel().getColumn(1).setPreferredWidth(10);
            visor.getColumnModel().getColumn(2).setResizable(false);
            visor.getColumnModel().getColumn(2).setPreferredWidth(40);
            visor.getColumnModel().getColumn(3).setResizable(false);
            visor.getColumnModel().getColumn(3).setPreferredWidth(5);
            visor.getColumnModel().getColumn(4).setResizable(false);
            visor.getColumnModel().getColumn(4).setPreferredWidth(5);
        }

        txtIdClases.add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 240, 560, 60));

        jLabel2.setFont(new java.awt.Font("Eras Bold ITC", 0, 14)); // NOI18N
        jLabel2.setText("ID de las Clases Grupales:");
        txtIdClases.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 167, -1, 20));

        jLabel12.setFont(new java.awt.Font("Eras Bold ITC", 0, 14)); // NOI18N
        jLabel12.setText("ID del cliente:");
        txtIdClases.add(jLabel12, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 60, -1, -1));

        btnBuscar.setBackground(new java.awt.Color(255, 145, 77));
        btnBuscar.setFont(new java.awt.Font("Eras Bold ITC", 0, 18)); // NOI18N
        btnBuscar.setText("Buscar");
        btnBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarActionPerformed(evt);
            }
        });
        txtIdClases.add(btnBuscar, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 190, 100, 30));

        jScrollPane4.setBackground(new java.awt.Color(255, 102, 102));

        Tabla.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        Tabla.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Num. Registros", "Id Clase Inscrita", "Id Cliente"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        Tabla.setToolTipText("");
        Tabla.setSelectionBackground(new java.awt.Color(255, 145, 77));
        jScrollPane4.setViewportView(Tabla);
        if (Tabla.getColumnModel().getColumnCount() > 0) {
            Tabla.getColumnModel().getColumn(0).setResizable(false);
            Tabla.getColumnModel().getColumn(1).setResizable(false);
            Tabla.getColumnModel().getColumn(2).setResizable(false);
        }

        txtIdClases.add(jScrollPane4, new org.netbeans.lib.awtextra.AbsoluteConstraints(610, 30, 330, 290));

        txtIDEntrenador.setEditable(false);
        txtIDEntrenador.setBackground(new java.awt.Color(224, 223, 222));
        txtIdClases.add(txtIDEntrenador, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 130, 260, -1));

        txtIdClienteN.setEditable(false);
        txtIdClienteN.setBackground(new java.awt.Color(224, 223, 222));
        txtIdClienteN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtIdClienteNActionPerformed(evt);
            }
        });
        txtIdClases.add(txtIdClienteN, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 80, 260, -1));

        jLabel15.setFont(new java.awt.Font("Eras Bold ITC", 0, 14)); // NOI18N
        jLabel15.setText("ID del Instructor:");
        txtIdClases.add(jLabel15, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 110, -1, -1));

        jButton1.setBackground(new java.awt.Color(255, 145, 77));
        jButton1.setFont(new java.awt.Font("Eras Bold ITC", 0, 18)); // NOI18N
        jButton1.setText("Buscar Cliente");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        txtIdClases.add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 80, -1, -1));

        txtIDEmpleado.setEditable(false);
        txtIDEmpleado.setBackground(new java.awt.Color(224, 223, 222));
        txtIdClases.add(txtIDEmpleado, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 130, 120, -1));

        Fondo.setBackground(new java.awt.Color(255, 145, 77));
        Fondo.setPreferredSize(new java.awt.Dimension(836, 336));
        Fondo.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                FondoMouseDragged(evt);
            }
        });
        Fondo.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                FondoMousePressed(evt);
            }
        });
        Fondo.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        Salir.setBackground(new java.awt.Color(193, 86, 14));
        Salir.setFont(new java.awt.Font("Consolas", 1, 36)); // NOI18N
        Salir.setForeground(new java.awt.Color(255, 255, 255));
        Salir.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        Salir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SalirActionPerformed(evt);
            }
        });
        Fondo.add(Salir, new org.netbeans.lib.awtextra.AbsoluteConstraints(890, 10, 60, 53));

        jLabel21.setFont(new java.awt.Font("Eras Demi ITC", 1, 48)); // NOI18N
        jLabel21.setForeground(new java.awt.Color(255, 255, 255));
        jLabel21.setText("Registro de Clases Grupales");
        Fondo.add(jLabel21, new org.netbeans.lib.awtextra.AbsoluteConstraints(22, 39, 730, -1));

        Regresarbtn.setBackground(new java.awt.Color(193, 86, 14));
        Regresarbtn.setFont(new java.awt.Font("Consolas", 1, 36)); // NOI18N
        Regresarbtn.setForeground(new java.awt.Color(255, 255, 255));
        Regresarbtn.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        Regresarbtn.setMaximumSize(new java.awt.Dimension(10, 8));
        Regresarbtn.setMinimumSize(new java.awt.Dimension(10, 8));
        Regresarbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RegresarbtnActionPerformed(evt);
            }
        });
        Fondo.add(Regresarbtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(830, 10, 50, 50));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(txtIdClases, javax.swing.GroupLayout.DEFAULT_SIZE, 952, Short.MAX_VALUE)
            .addComponent(Fondo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(Fondo, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(txtIdClases, javax.swing.GroupLayout.PREFERRED_SIZE, 339, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void bntInsertarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bntInsertarActionPerformed
        // TODO add your handling code here:
        
    }//GEN-LAST:event_bntInsertarActionPerformed

    private void btnGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuardarActionPerformed
          
       // Declaración de la cadena SQL para insertar datos en la tabla 'detalle_CG'
String guardar = "INSERT INTO detalle_CG (id_Clasesg, id_Cliente) VALUES (?, ?)";
        
// Declaración de la cadena SQL para seleccionar todos los datos de la tabla 'detalle_CG'
String consulta = "SELECT id_DCG AS 'Num. Registros',id_Clasesg AS 'Id Clase Inscrita', id_Cliente  AS 'Id Cliente'from detalle_CG;";

// Crear un objeto de la clase 'conectar' para establecer la conexión con la base de datos
conectar ObjetoConexion = new conectar();

try {
    // Preparar la llamada SQL para la inserción utilizando un objeto CallableStatement
    CallableStatement cs = (CallableStatement) ObjetoConexion.getConexion().prepareCall(guardar);
    
    // Preparar la llamada SQL para la consulta utilizando un objeto CallableStatement
    CallableStatement cs2 = (CallableStatement) ObjetoConexion.getConexion().prepareCall(consulta);
    
    // Configurar los parámetros de la consulta de inserción utilizando valores obtenidos de la interfaz de usuario
    cs.setInt(1, Integer.parseInt(txtIdClasesG.getText())); // Establecer el primer parámetro (id_Clasesg)
    cs.setString(2, txtIdcliente.getText()); // Establecer el segundo parámetro (id_Cliente)
    
    // Ejecutar la consulta de inserción
    cs.execute();
    
    // Ejecutar la consulta de selección y obtener el resultado en un ResultSet
    ResultSet rs = cs2.executeQuery();
    
    // Crear un modelo de tabla para almacenar los datos del ResultSet
    DefaultTableModel modelo = new DefaultTableModel();
    
    // Obtener los metadatos del ResultSet para extraer información de las columnas
    ResultSetMetaData rsMd = (ResultSetMetaData) rs.getMetaData();
    int cantidadColumnas = rsMd.getColumnCount(); // Obtener el número de columnas en el ResultSet

    // Añadir las columnas al modelo de la tabla
    for (int i = 1; i <= cantidadColumnas; i++) {
        modelo.addColumn(rsMd.getColumnLabel(i)); // Añadir cada columna con su nombre correspondiente
    }

    // Añadir las filas al modelo de la tabla
    while (rs.next()) {
        Object[] fila = new Object[cantidadColumnas]; // Crear un array para almacenar los datos de una fila
        for (int i = 0; i < cantidadColumnas; i++) {
            fila[i] = rs.getObject(i + 1); // Obtener el valor de cada columna y añadirlo al array
        }
        modelo.addRow(fila); // Añadir la fila al modelo de la tabla
    }

    // Establecer el modelo en la tabla para mostrar los datos en la interfaz de usuario
    Tabla.setModel(modelo);

} catch (Exception e) {
    // Manejar cualquier excepción que ocurra durante el proceso y mostrar un mensaje de error
    JOptionPane.showMessageDialog(null, "Error al actualizar la tabla: " + e.getMessage());
}

    
                  
    }//GEN-LAST:event_btnGuardarActionPerformed

    private void btnBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarActionPerformed
        // TODO add your handling code here:
       buscarCliente();
       buscarEntrenador();
     
    }//GEN-LAST:event_btnBuscarActionPerformed

    private void txtIdClienteNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtIdClienteNActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtIdClienteNActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        buscarClienteN();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void SalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SalirActionPerformed
        int R = JOptionPane.showConfirmDialog(null, "Estas seguro de salir?", "Salir", JOptionPane.YES_NO_OPTION,
            JOptionPane.INFORMATION_MESSAGE);

        if (R == 0) {
            System.exit(0);}
    }//GEN-LAST:event_SalirActionPerformed

    private void RegresarbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RegresarbtnActionPerformed
        // TODO add your handling code here:

        int R = JOptionPane.showConfirmDialog(null, "Estas Seguro de regresar?", "Regresar", JOptionPane.YES_NO_OPTION,
            JOptionPane.INFORMATION_MESSAGE);

        if (R == 0) {
            Perfil_Empleado Perfil = new Perfil_Empleado();
            Perfil.setVisible(true);
            this.setVisible(false);
        }
    }//GEN-LAST:event_RegresarbtnActionPerformed

    private void FondoMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_FondoMouseDragged
        // TODO add your handling code here:

        int CX = this.getLocation().x;
        int CY = this.getLocation().y;

        int MoveX = ((CX + evt.getX()) - (CX + mPoint.x));
        int MoveY = ((CY + evt.getY()) - (CY + mPoint.y));

        int x = CX + MoveX;
        int y = CY + MoveY;

        this.setLocation(x, y);
    }//GEN-LAST:event_FondoMouseDragged

    private void FondoMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_FondoMousePressed
        // TODO add your handling code here:
        mPoint = evt.getPoint();
        getComponentAt(mPoint);
    }//GEN-LAST:event_FondoMousePressed

    
  private ClienteCarmenDAO cdao = new ClienteCarmenDAO(); // Instancia de clienteDAO

// Instancia de ClienteDAO para manejar operaciones de cliente
 

// Método para buscar un cliente y mostrar los datos de las clases grupales asociadas
private void buscarCliente() {
    String cod = txtIdClasesG.getText(); // Obtiene el ID de la clase grupal desde la interfaz de usuario
    if (cod.equals("")) { // Verifica si el campo de texto está vacío
        JOptionPane.showMessageDialog(this, "Ingresa un ID"); // Muestra un mensaje si el ID no ha sido ingresado
    } else {
        clienteCarmen cliente = cdao.listarID(cod); // Busca el cliente por ID utilizando el DAO
        
        try {
            // Crear un modelo de tabla para mostrar los datos de las clases grupales
            DefaultTableModel modelo = new DefaultTableModel();
            modelo.addColumn("Id Clase Grupal");
            modelo.addColumn("Id Instructor");
            modelo.addColumn("Nombre de la clase");
            modelo.addColumn("Dia");
            modelo.addColumn("Horario");
            
            // Consulta SQL para obtener datos de las clases grupales
            String sql = "SELECT * FROM Clases_Grupales WHERE id_CG = ?";
            conectar ObjetoConexion = new conectar(); // Establece la conexión a la base de datos
            CallableStatement cs = (CallableStatement) ObjetoConexion.getConexion().prepareCall(sql); // Prepara la consulta
            
            cs.setString(1, cod); // Establece el parámetro de la consulta con el ID de la clase grupal
            
            ResultSet rs = cs.executeQuery(); // Ejecuta la consulta y obtiene los resultados
            
            // Procesa los resultados de la consulta y los añade al modelo de la tabla
            while (rs.next()) {
                String nombre = rs.getString("id_CG");
                String apellidop = rs.getString("id_entrenador");
                String apellidom = rs.getString("nombreCG");
                String dia = rs.getString("dia");
                String hora = rs.getString("horario");
                
                modelo.addRow(new Object[] { nombre, apellidop, apellidom, dia, hora });
                txtIDEmpleado.setText(apellidop);
                
                visor.setModel(modelo); // Establece el modelo en el visor de la tabla
            }
        } catch (Exception e) {
            System.out.println(e.getMessage()); // Muestra el mensaje de error en caso de excepción
        }
        
        if (cliente != null) {
            // Si el cliente existe, se pueden actualizar los campos de texto en la interfaz de usuario
            // Ejemplo: txtIdClasesG.setText(cliente.getNom()); // Suponiendo que el nombre se obtiene de cliente
        } else {
            JOptionPane.showMessageDialog(this, "Este cliente no existe, pruebe con otro"); // Mensaje si el cliente no existe
        }
    }
}

// Método para buscar un cliente por su nombre completo
void buscarClienteN() {
    String cod = txtIdcliente.getText(); // Obtiene el ID del cliente desde la interfaz de usuario
    if (txtIdcliente.getText().equals("")) { // Verifica si el campo de texto está vacío
        JOptionPane.showMessageDialog(this, "Ingresa un ID"); // Muestra un mensaje si el ID no ha sido ingresado
    } else {
        clienteCarmen cliente = cdao.listarID(cod); // Busca el cliente por ID utilizando el DAO
        if (cliente.getIdc() != null) {
            txtIdClienteN.setText(cliente.getNom() + " " + cliente.getApellidoP() + " " + cliente.getApellidoM()); // Muestra el nombre completo del cliente
        } else {
            JOptionPane.showMessageDialog(this, "Este cliente no existe, pruebe con otro"); // Mensaje si el cliente no existe
        }
    }
}

// Instancia de EntrenadorDAO para manejar operaciones de entrenador
private EntrenadorCarmenDAO edao = new EntrenadorCarmenDAO();

// Método para buscar un entrenador y mostrar los datos de los clientes asociados
private void buscarEntrenador() {
    String cod = txtIDEmpleado.getText(); // Obtiene el ID del entrenador desde la interfaz de usuario
    String cud = txtClienteN.getText(); // (Parece que esta variable no se utiliza en el código actual)
    if (cod.equals("")) { // Verifica si el campo de texto está vacío
        JOptionPane.showMessageDialog(this, "Ingresa un ID"); // Muestra un mensaje si el ID no ha sido ingresado
    } else {
        EntrenadorCarmen entrenador = edao.listarID(cod); // Busca el entrenador por ID utilizando el DAO
        
        try {
            // Consulta SQL para obtener datos del cliente asociado al entrenador
            String sql = "SELECT * FROM cliente WHERE id_cliente = ?";
            conectar ObjetoConexion = new conectar(); // Establece la conexión a la base de datos
            CallableStatement cs = (CallableStatement) ObjetoConexion.getConexion().prepareCall(sql); // Prepara la consulta
            
            cs.setString(1, cod); // Establece el parámetro de la consulta con el ID del cliente
            
            ResultSet rs = cs.executeQuery(); // Ejecuta la consulta y obtiene los resultados
            DefaultTableModel modelo = new DefaultTableModel();
            
            // Procesa los resultados de la consulta y los añade al modelo de la tabla
            while (rs.next()) {
                String id_cliente = rs.getString("id_cliente");
                String nombre = rs.getString("nombreE");
                String apellidop = rs.getString("apellidoPE");
                String apellidom = rs.getString("apellidoME");
                
                modelo.addRow(new Object[] { id_cliente, nombre + " " + apellidop + " " + apellidom });
                
                Tabla.setModel(modelo); // Establece el modelo en la tabla
            }
        } catch (Exception e) {
            System.out.println(e.getMessage()); // Muestra el mensaje de error en caso de excepción
        }
        
        if (entrenador != null) {
            // Si el entrenador existe, se pueden actualizar los campos de texto en la interfaz de usuario
            txtIDEntrenador.setText(entrenador.getNombreE()+" "+entrenador.getApellidoPE()+" "+entrenador.apellidoME); // Muestra el nombre del entrenador
        } else {
            JOptionPane.showMessageDialog(this, "Este Entrenador no existe, pruebe con otro"); // Mensaje si el entrenador no existe
        }
    }
}





  


    /**
     * 
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(clases2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
       //</editor-fold>
       //</editor-fold>
       //</editor-fold>
       //</editor-fold>
       //</editor-fold>
       //</editor-fold>
       //</editor-fold>
       //</editor-fold>
       //</editor-fold>
       //</editor-fold>
       //</editor-fold>
       //</editor-fold>
       //</editor-fold>
       //</editor-fold>
       //</editor-fold>
       //</editor-fold>
       
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new clases2().setVisible(true);
        } // Variables declaration - do not modify
        );
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel Fondo;
    private javax.swing.JButton Regresarbtn;
    private javax.swing.JButton Salir;
    private javax.swing.JTextField TN;
    private javax.swing.JTable Tabla;
    private javax.swing.JTextField Tam;
    private javax.swing.JTextField Tap;
    private javax.swing.JTextField Tmem;
    private javax.swing.JButton bntInsertar;
    private javax.swing.JButton btnBuscar;
    private javax.swing.JButton btnGuardar;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTextField txtClienteN;
    private javax.swing.JTextField txtIDEmpleado;
    private javax.swing.JTextField txtIDEntrenador;
    private javax.swing.JPanel txtIdClases;
    private javax.swing.JTextField txtIdClasesG;
    private javax.swing.JTextField txtIdClienteN;
    private javax.swing.JTextField txtIdcliente;
    private javax.swing.JTextField txtInstructor;
    private javax.swing.JTable visor;
    // End of variables declaration//GEN-END:variables

    

    
}
